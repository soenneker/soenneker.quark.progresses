@using Soenneker.Quark.Divs
@using Soenneker.Quark.Components.Builders
@using Soenneker.Quark.Components.Builders.Colors
@inherits Soenneker.Quark.Element

<Div Class="progress-bar" @attributes="BuildAttributes()" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="100" >
    @if (ShowLabel)
    {
        @($"{Value}%")
    }
    @ChildContent
</Div>

@code {

    [Parameter]
    public int Value { get; set; } = 0;

    [Parameter]
    public CssValue<ColorBuilder>? Color { get; set; }

    [Parameter]
    public bool Striped { get; set; }

    [Parameter]
    public bool Animated { get; set; }

    [Parameter]
    public bool ShowLabel { get; set; } = true;

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "progress-bar";

        if (Striped)
            baseClasses = $"{baseClasses} progress-bar-striped";

        if (Animated)
            baseClasses = $"{baseClasses} progress-bar-animated";

        AppendToClassAttr(attributes, baseClasses);

        // Handle color styling
        if (Color is not null && !Color.Value.IsEmpty)
        {
            string v = Color.Value.ToString().Trim();

            if (Color.Value.IsCssClass)
            {
                if (v.StartsWith("bg-", StringComparison.Ordinal))
                    AppendToClassAttr(attributes, v);
                else
                    AppendToClassAttr(attributes, $"bg-{v}");
            }
            else
            {
                // Literal CSS value â†’ straight style
                if (!attributes.TryGetValue("style", out var existing))
                    attributes["style"] = $"background-color:{v};width: {Value}%;";
                else
                    attributes["style"] = $"{existing}background-color:{v};width: {Value}%;";
            }
        }
        else
        {
            attributes["style"] = $"width: {Value}%";
        }

        return attributes;
    }

}
